import unittest
from matrix import Matrix, Vector
from tests.setup import Setup

base = Setup()


class Tuple_Rows(unittest.TestCase):

	def test_tuple_1(self):
		base.test_basic(res=base.m[1, :],
		                expected=['E', 'F', 'G', 'H', 'I'],
		                res_type=Vector)

	def test_tuple_rev1(self):
		base.test_basic(res=base.m[-1, :],
		                expected=['J', 'K', 'L', 'M', None],
		                res_type=Vector)


class Tuple_Rows_Start(unittest.TestCase):
	@unittest.skip("'list' object has no attribute '_get_transform'")
	def test_tuple_1_colon(self):
		base.test_basic(res=base.m[1:, :],
		                expected=[['E', 'F', 'G', 'H', 'I'],
		                          ['J', 'K', 'L', 'M', None]],
		                res_type=list)

	@unittest.skip("'list' object has no attribute '_get_transform'")
	def test_tuple_rev1_colon(self):
		base.test_basic(res=base.m[-3:, :],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['E', 'F', 'G', 'H', 'I'],
		                          ['J', 'K', 'L', 'M', None]],
		                res_type=list)

		self.assertIsNot(base.m[-3:, :], base.m)


class _Tuple_Rows_Stop(unittest.TestCase):
	def test_colon_2(self):
		base.test_basic(res=base.m[:2, :],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['E', 'F', 'G', 'H', 'I']],
		                res_type=list)

	def test_colon_rev2(self):
		base.test_basic(res=base.m[:-2, :],
		                expected=['A', 'B', 'C', 'D', None],
		                res_type=Vector)


class _Tuple_Rows_Start_Stop(unittest.TestCase):
	def test_1_colon_2(self):
		base.test_basic(res=base.m[1:2, :],
		                expected=['E', 'F', 'G', 'H', 'I'],
		                res_type=Vector)

	def test_0_colon_rev2(self):
		base.test_basic(res=base.m[0:-1, :],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['E', 'F', 'G', 'H', 'I']],
		                res_type=list)

	def test_rev1_colon_3(self):
		base.test_basic(res=base.m[-1:3, :],
		                expected=['J', 'K', 'L', 'M', None],
		                res_type=Vector)

	def test_rev3_colon_rev1(self):
		base.test_basic(res=base.m[-3:-1, :],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['E', 'F', 'G', 'H', 'I']],
		                res_type=list)


class _Tuple_Rows_Step(unittest.TestCase):
	def test_dcolon_1(self):
		base.test_basic(res=base.m[::1, :],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['E', 'F', 'G', 'H', 'I'],
		                          ['J', 'K', 'L', 'M', None]],
		                res_type=list)

	def test_dcolon_2(self):
		base.test_basic(res=base.m[::2],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['J', 'K', 'L', 'M', None]],
		                res_type=list)

	# NOT transformation
	def test_dcolon_rev1(self):
		base.test_basic(res=base.m[::-1],
		                expected=[['J', 'K', 'L', 'M', None],
		                          ['E', 'F', 'G', 'H', 'I'],
		                          ['A', 'B', 'C', 'D', None]],
		                res_type=list)

	def test_dcolon_rev2(self):
		base.test_basic(res=base.m[::-2],
		                expected=[['J', 'K', 'L', 'M', None],
		                          ['A', 'B', 'C', 'D', None]],
		                res_type=list)

	def test_get_shallow_copy(self):
		base.test_basic(res=base.m[:],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['E', 'F', 'G', 'H', 'I'],
		                          ['J', 'K', 'L', 'M', None]],
		                res_type=Matrix,
		                index_type_pairs={0: Vector, 1: Vector, 2: Vector})

		self.assertIsNot(base.m[:], base.m)


class _Tuple_Rows_Start_Step(unittest.TestCase):
	def test_1_dcolon_2(self):
		base.test_basic(res=base.m[1::2, :],
		                expected=['E', 'F', 'G', 'H', 'I'],
		                res_type=Vector)

	def test_1_dcolon_rev1(self):
		base.test_basic(res=base.m[1::-1],
		                expected=[['E', 'F', 'G', 'H', 'I'],
		                          ['A', 'B', 'C', 'D', None]],
		                res_type=list)

	def test_rev3_dcolon_rev2(self):
		base.test_basic(res=base.m[-3::2],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['J', 'K', 'L', 'M', None]],
		                res_type=list)

	def test_rev2_dcolon_rev1(self):
		base.test_basic(res=base.m[-2::-1],
		                expected=[['E', 'F', 'G', 'H', 'I'],
		                          ['A', 'B', 'C', 'D', None]],
		                res_type=list)


class _Tuple_Rows_Stop_Step(unittest.TestCase):
	def test_colon_1_colon_1(self):
		base.test_basic(res=base.m[:1:1, :],
		                expected=['A', 'B', 'C', 'D', None],
		                res_type=Vector)

	def test_colon_1_colon_rev1(self):
		base.test_basic(res=base.m[:1:-1],
		                expected=['J', 'K', 'L', 'M', None],
		                res_type=Vector)

	def test_colon_rev1_colon_2(self):
		base.test_basic(res=base.m[:-1:2],
		                expected=['A', 'B', 'C', 'D', None],
		                res_type=Vector)

	def test_colon_rev4_colon_rev1(self):
		base.test_basic(res=base.m[:-4:-1],
		                expected=[['J', 'K', 'L', 'M', None],
		                          ['E', 'F', 'G', 'H', 'I'],
		                          ['A', 'B', 'C', 'D', None]],
		                res_type=list,
		                index_type_pairs={0: Vector, 1: Vector, 2: Vector})


class _Tuple_Rows_Start_Stop_Step(unittest.TestCase):
	def test_1_colon_3_colon_1(self):
		base.test_basic(res=base.m[1:3:1, :],
		                expected=[['E', 'F', 'G', 'H', 'I'],
		                          ['J', 'K', 'L', 'M', None]],
		                res_type=list)

	def test_rev1_colon_3_colon_1(self):
		base.test_basic(res=base.m[-1:3:1, :],
		                expected=['J', 'K', 'L', 'M', None],
		                res_type=Vector)

	def test_1_colon_rev1_colon_1(self):
		base.test_basic(res=base.m[1:-1:1, :],
		                expected=['E', 'F', 'G', 'H', 'I'],
		                res_type=Vector)

	def test_rev3_colon_rev1_colon_1(self):
		base.test_basic(res=base.m[-3:-1:1, :],
		                expected=[['A', 'B', 'C', 'D', None],
		                          ['E', 'F', 'G', 'H', 'I']],
		                res_type=list)

	def test_1_colon_1_colon_rev1(self):
		base.test_basic(res=base.m[2:1:-1, :],
		                expected=['J', 'K', 'L', 'M', None],
		                res_type=Vector)

	def test_rev1_colon_1_colon_rev1(self):
		base.test_basic(res=base.m[-1:1:-1, :],
		                expected=['J', 'K', 'L', 'M', None],
		                res_type=Vector)

	def test_1_colon_rev4_colon_rev1(self):
		base.test_basic(res=base.m[1:-4:-1, :],
		                expected=[['E', 'F', 'G', 'H', 'I'],
		                          ['A', 'B', 'C', 'D', None]],
		                res_type=list)

	def test_rev1_colon_rev4_colon_rev2(self):
		base.test_basic(res=base.m[-1:-4:-2, :],
		                expected=[['J', 'K', 'L', 'M', None],
		                          ['A', 'B', 'C', 'D', None]],
		                res_type=list)


class Tuple_Columns(unittest.TestCase):
	def test_tuple_colon_1(self):
		base.test_basic(res=base.m[:, 1],
		                expected=['B', 'F', 'K'],
		                res_type=Vector)

	def test_tuple_colon_rev1(self):
		base.test_basic(res=base.m[:, -1],
		                expected=[None, 'I', None],
		                res_type=Vector)


class Tuple_Columns_Start(unittest.TestCase):
	def test_tuple_colon_1(self):
		base.test_basic(res=base.m[:, 1:],
		                expected=[['B', 'F', 'K'],
		                          ['C', 'G', 'L'],
		                          ['D', 'H', 'M'],
		                          [None, 'I', None]],
		                res_type=list)

	def test_tuple_colon_rev1(self):
		base.test_basic(res=base.m[:, -2:],
		                expected=[['D', 'H', 'M'],
		                          [None, 'I', None]],
		                res_type=list)


class Tuple_Columns_Stop(unittest.TestCase):
	def test_tuple_colon_1(self):
		base.test_basic(res=base.m[:, :2],
		                expected=[['A', 'E', 'J'],
		                          ['B', 'F', 'K']],
		                res_type=list)

	def test_tuple_colon_rev1(self):
		base.test_basic(res=base.m[:, :-2],
		                expected=[['A', 'E', 'J'],
		                          ['B', 'F', 'K'],
		                          ['C', 'G', 'L']],
		                res_type=list)


class Tuple_Columns_Start_Stop(unittest.TestCase):
	def test_0_colon_rev2(self):
		base.test_basic(res=base.m[:, 0:-3],
		                expected=[['A', 'E', 'J'],
		                          ['B', 'F', 'K']],
		                res_type=list)

	def test_rev1_colon_3(self):
		base.test_basic(res=base.m[:, -1:5],
		                expected=[None, 'I', None],
		                res_type=Vector)

	def test_rev3_colon_rev1(self):
		base.test_basic(res=base.m[:, -3:-1],
		                expected=[['C', 'G', 'L'],
		                          ['D', 'H', 'M']],
		                res_type=list)


class Tuple_Columns_Step(unittest.TestCase):
	def test_dcolon_1(self):
		base.test_basic(res=base.m[:, ::1],
		                expected=[['A', 'E', 'J'],
		                          ['B', 'F', 'K'],
		                          ['C', 'G', 'L'],
		                          ['D', 'H', 'M'],
		                          [None, 'I', None]],
		                res_type=list)

	def test_dcolon_2(self):
		base.test_basic(res=base.m[:, ::2],
		                expected=[['A', 'E', 'J'],
		                          ['C', 'G', 'L'],
		                          [None, 'I', None]],
		                res_type=list)

	def test_dcolon_rev1(self):
		base.test_basic(res=base.m[::-3],
		                expected=[[None, 'I', None],
		                          ['B', 'F', 'K']],
		                res_type=list)

	def test_get_shallow_copy(self):
		base.test_basic(res=base.m[:, :],
		                expected=[['A', 'E', 'J'],
		                          ['B', 'F', 'K'],
		                          ['C', 'G', 'L'],
		                          ['D', 'H', 'M'],
		                          [None, 'I', None]],
		                res_type=Matrix,
		                index_type_pairs={0: Vector, 1: Vector, 2: Vector, 3: Vector, 4: Vector})


class Tuple_Columns_Start_Step(unittest.TestCase):
	def test_1_dcolon_2(self):
		base.test_basic(res=base.m[:, 1::2],
		                expected=[['B', 'F', 'K'],
		                          ['D', 'H', 'M']],
		                res_type=list)

	def test_1_dcolon_rev1(self):
		base.test_basic(res=base.m[:, 1::-1],
		                expected=[['B', 'F', 'K'],
		                          ['A', 'E', 'J']],
		                res_type=list)

	def test_rev3_dcolon_rev2(self):
		base.test_basic(res=base.m[:, -3::2],
		                expected=[['C', 'G', 'L'],
		                          [None, 'I', None]],
		                res_type=list)

	def test_rev2_dcolon_rev1(self):
		base.test_basic(res=base.m[:, -2::-1],
		                expected=[['D', 'H', 'M'],
		                          ['B', 'F', 'K']],
		                res_type=list)


class Tuple_Columns_Stop_Step(unittest.TestCase):
	def test_colon_1_colon_1(self):
		base.test_basic(res=base.m[:, :1:1],
		                expected=['A', 'E', 'J'],
		                res_type=Vector)

	def test_colon_1_colon_rev1(self):
		base.test_basic(res=base.m[:1:-2],
		                expected=[[None, 'I', None],
		                          ['C', 'G', 'L']],
		                res_type=list)

	def test_colon_rev1_colon_2(self):
		base.test_basic(res=base.m[:-1:2],
		                expected=[['A', 'E', 'J'],
		                          ['C', 'G', 'L']],
		                res_type=Vector)

	def test_colon_rev4_colon_rev1(self):
		base.test_basic(res=base.m[:-3:-1],
		                expected=[[None, 'I', None],
		                          ['D', 'H', 'M']],
		                res_type=list)


# @unittest.skip
# def test_col_stop1(self):
# 	res = self.m[1][:1]
# 	expected = 'E'
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, str)
#
# @unittest.skip
# def test_col_stop2(self):
# 	res = self.m[1][:2]
# 	expected = mat.Row(['E', 'F'])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat.Row)
#
# @unittest.skip
# def test_col_stop_rev(self):
# 	res = self.m[1][:-1]
# 	expected = mat.Row(['E', 'F', 'G', 'H'])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat.Row)
#
# @unittest.skip
# def test_col_step(self):
# 	res = self.m[2][::2]
# 	expected = mat.Row(['J', 'L', None])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat.Row)
#
# @unittest.skip
# def test_col_step_rev(self):
# 	res = self.m[1][::-1]
# 	expected = mat.Row(['I', 'H', 'G', 'F', 'E'])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat.Row)
#
# @unittest.skip
# def test_row_stop_col_start_stop(self):
# 	res = self.m[:2][1:3]
# 	expected = mat([['B', 'C'],
# 	                ['F', 'G']])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat)
#
# @unittest.skip
# def test_row_step_col_start_stop(self):
# 	res = self.m[::2][1:3]
# 	expected = mat([['B', 'C'],
# 	                ['K', 'L']])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat)
#
# @unittest.skip
# def test_col_stop_step_rev(self):
# 	res = self.m[1][:1:-2]
# 	expected = mat.Row(['I', 'G'])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat.Row)
#
# @unittest.skip
# def test_row_stop_rev_col_stop_step_rev1(self):
# 	res = self.m[:-1][:2:-2]
# 	expected = mat.Row([None, 'I'])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat.Row)
#
# @unittest.skip
# def test_row_stop_rev_col_stop_step_rev2(self):
# 	res = self.m[:-1][:1:-2]
# 	expected = mat([[None, 'C'],
# 	                ['I', 'G']])
# 	self.assertEqual(res, expected,
# 	                 msg=f"\nMESSAGE\nres:\t{res.__str__()}\t{type(res)}\nex:\t{expected.__str__()}\t{type(expected)}")
# 	self.assertIsInstance(res, mat)
# if __name__ == '__main__':
# 	unittest.main(self)
